/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */
plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    id 'jacoco'
}
version = '1.0'
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    //noinspection VulnerableLibrariesLocal
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.processing:core:3.3.7'
    implementation 'org.reflections:reflections:0.10.2'

    // Custom stuff
    implementation 'org.tinylog:tinylog-api:2.6.2'
    implementation 'org.tinylog:tinylog-impl:2.6.2'
    implementation 'net.mikera:vectorz:0.52.0'

    // Reflection
    implementation 'io.github.classgraph:classgraph:4.8.162'

    implementation 'org.javatuples:javatuples:1.2'
    
    // Dev tools
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testCompileOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

application {
    // Define the main class for the application
    getMainClass().set('WizardTD.App')
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    ignoreFailures = true
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'WizardTD.App'
    }
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
